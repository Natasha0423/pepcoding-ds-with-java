import java.io.*;
import java.util.*;
public class Main {
  private static class Node {
    int data;
    ArrayList<Node> children = new ArrayList<>();
  }
  public static void display(Node node) {
    String str = node.data + " -> ";
    for (Node child : node.children)
      str += child.data + ", ";
    str += ".";
    System.out.println(str);
    for (Node child : node.children) 
      display(child);
  }
  public static Node construct(int[] arr) {
    Node root = null;
    Stack<Node> st = new Stack<>();
    for (int i = 0; i < arr.length; i++) {
      if (arr[i] == -1) {
        st.pop();
      } else {
        Node t = new Node();
        t.data = arr[i];
        if (st.size() > 0)
          st.peek().children.add(t);
        else
          root = t;
        st.push(t);
      } }
    return root;
  }
  public static void levelOrderLinewiseZZ(Node node){
     Stack<Node> q=new Stack<>();
     q.push(node);
     Stack<Node> qu=new Stack<>();
     int ls=0;
     while(q.size()>0){
           Node val=q.pop();
           System.out.print(val.data+" ");
           if(ls % 2==0){
               for(int i=0;i<val.children.size();i++){
                Node child = val.children.get(i);
                qu.push(child);
                }
           }else{
                for(int i=val.children.size()-1;i>=0;i--){
                Node child = val.children.get(i);
                qu.push(child);
                } 
            }
          if(q.size()==0){
              q=qu;
              qu=new Stack<>();
              ls++;
              System.out.println();
          } } }
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) 
      arr[i] = Integer.parseInt(values[i]);
    Node root = construct(arr);
    levelOrderLinewiseZZ(root);
  }
}